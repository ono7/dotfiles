return {
  "nvim-telescope/telescope.nvim",
  version = false,
  lazy = false,
  dependencies = {
    {
      "nvim-telescope/telescope-fzf-native.nvim",
      build = "make", -- linux, macos (requires gcc,clang,make)
    },
    "nvim-lua/plenary.nvim",
    "nvim-tree/nvim-web-devicons",
    "natecraddock/workspaces.nvim", -- manage my workspaces
    {
      "nvim-telescope/telescope-ui-select.nvim",
      config = function()
        local telescope = require("telescope")
        telescope.load_extension("ui-select")
      end,
    },
  },

  config = function()
    local set_keys = require("utils.keys")

    local opt = { noremap = true, silent = true }
    local k = vim.keymap.set

    local telescope = require("telescope")
    local actions = require("telescope.actions")
    -- local trouble = require("trouble.sources.telescope")
    local icons = require("config.icons")

    require("telescope").load_extension("fzf")

    local default_maps = {
      i = {
        [set_keys.prefix("f")] = actions.to_fuzzy_refine,
        [set_keys.prefix("p")] = actions.move_selection_previous,
        [set_keys.prefix("n")] = actions.move_selection_next,
        [set_keys.prefix("q")] = actions.smart_add_to_qflist + actions.open_qflist,
        [set_keys.prefix("x")] = actions.select_horizontal,
        [set_keys.prefix("v")] = actions.select_vertical,

        -- ["<C-f"] = actions.to_fuzzy_refine,
        -- ["<C-p>"] = actions.move_selection_previous,
        -- ["<C-n>"] = actions.move_selection_next,
        -- ["<C-q"] = actions.smart_add_to_qflist + actions.open_qflist,
        -- ["<C-x"] = actions.select_horizontal,
        -- ["<C-v"] = actions.select_vertical,
        ["<M-p>"] = actions.move_selection_previous,
        ["<M-n>"] = actions.move_selection_next,
        -- ["<D-p>"] = actions.move_selection_previous,
        -- ["<D-n>"] = actions.move_selection_next,
        -- ["<M-x>"] = actions.select_horizontal,
        -- ["<M-v>"] = actions.select_vertical,
      },
      n = { ["q"] = actions.close },
    }

    local with_dropdown = {
      theme = "ivy",
    }

    local fd_command = {
      "fd",
      "--type",
      "f",
      "--strip-cwd-prefix",
      "--hidden",
      "--no-ignore", -- Don't use any default ignore files
      "--ignore-file",
      vim.fn.expand("~/.config/fd/ignore"), -- Expand the path explicitly
    }

    require("telescope").setup({
      file_ignore_patterns = { "%.git/." },
      pickers = {
        find_files = with_dropdown,
        git_files = with_dropdown,
        oldfiles = with_dropdown,
        buffers = with_dropdown,
        workspaces = with_dropdown,
        diagnostics = { theme = "ivy" },
        live_grep = {
          mappings = default_maps,
          theme = "ivy",
        },
      },
      extensions = {
        fzf = {
          fuzzy = true, -- false will only do exact matching
          override_generic_sorter = true, -- default true
          override_file_sorter = true, -- default true
          case_mode = "smart_case",
        },
        -- ["ui-select"] = {
        --   require("telescope.themes").get_dropdown({}),
        -- },
      },

      defaults = {
        theme = "ivy",
        mappings = default_maps,
        set_env = { ["COLORTERM"] = "truecolor" },
        -- prompt_prefix = "üîç ",
        prompt_prefix = " " .. icons.ui.Telescope .. "  ",
        selection_caret = icons.ui.BoldArrowRight .. " ",
        entry_prefix = "  ",
        file_ignore_patterns = { "node_modules", "package-lock.json", ".git" },
        path_display = function(opts, path)
          local tail = require("telescope.utils").path_tail(path)

          -- Replace home directory with ~/ for cleaner display
          local home = os.getenv("HOME")
          local display_path = path
          if home and path:sub(1, #home) == home then
            display_path = "~" .. path:sub(#home + 1)
          end

          -- Format with cleaned path
          local formatted = string.format(" %s (%s)", tail, display_path)

          local highlights = {
            {
              {
                #tail + 2, -- highlight start position +2 = (path = string.format)
                #tail + #formatted, -- highlight end position adjusted for new path
              },
              "Directory", -- highlight group name
            },
          }

          return formatted, highlights
        end,
        -- Add the extra space between icon and path using the entry formatter
        preview = false,
      },

      mappings = default_maps,
    })

    local builtin = require("telescope.builtin")

    -- vim.keymap.set("n", "<leader>b", builtin.current_buffer_fuzzy_find)

    -- migrated to fzf
    -- k("n", "<leader>vc", function()
    --   builtin.git_files({
    --     previewer = false,
    --     cwd = "~/.dotfiles",
    --     hidden = true,
    --     show_untracked = true,
    --     prompt_title = "Dotfiles",
    --     sort_mru = true, -- Most recently used first
    --     no_ignore = false,
    --   })
    -- end)

    -- k("n", "<C-d>", function()
    --   builtin.diagnostics({ bufnr = 0, previewer = false, theme = "ivy" })
    -- end, opt)

    -- k("n", "<M-d>", function()
    --   builtin.diagnostics({ bufnr = 0, previewer = false, theme = "ivy" })
    -- end, opt)

    -- does not use find_command
    -- migrated to fzf lua
    -- vim.keymap.set("n", "<M-g>", function()
    --   builtin.live_grep({
    --     vimgrep_arguments = {
    --       "rg",
    --       "--color=never",
    --       "--no-heading",
    --       "--with-filename",
    --       "--line-number",
    --       "--column",
    --       "--smart-case",
    --       "-u",
    --       "--glob",
    --       "!venv",
    --       "--glob",
    --       "!.collections",
    --       "--glob",
    --       "!.git",
    --       "--glob",
    --       "!tags",
    --     },
    --     show_untracked = true,
    --     hidden = true,
    --     no_ignore = false,
    --     theme = "ivy",
    --     ---- this will allow search from the git root dir
    --     -- cwd = (function()
    --     --   local d = vim.fn.systemlist("git rev-parse --show-toplevel")[1]
    --     --   if d:match("not a git repository") then
    --     --     return "."
    --     --   end
    --     --   return d
    --     -- end)(),
    --   })
    -- end, { desc = "Live grep with rg" })

    -- k("n", "<M-b>", function()
    --   builtin.buffers({ previewer = false })
    -- end, opt)

    -- k("n", "<leader>s", function()
    --   builtin.lsp_document_symbols({ previewer = true, show_line = true })
    -- end, opt)

    k("n", "<M-w>", ":Telescope workspaces theme=ivy<CR>", opt)

    -- k("n", "<leader>S", function()
    --   builtin.lsp_workspace_symbols({ previewer = true })
    -- end, opt)

    --- handle all ignores in ~/.config/fd/ignore
    -- k({ "n", "x" }, "<M-f>", function()
    --   local opts = {
    --     hidden = true,
    --     show_untracked = true,
    --     find_command = fd_command,
    --     cwd = vim.fn.expand("%:p:h"), -- current file's working directory
    --   }
    --   require("telescope.builtin").find_files(opts)
    -- end, opt)

    -- k({ "n", "x" }, "<C-f>", function()
    --   local opts = {
    --     sort_mru = true, -- Most recently used first
    --     hidden = true,
    --     show_untracked = true,
    --     find_command = fd_command,
    --     cwd = vim.fn.expand("%:p:h"), -- current file's working directory
    --   }
    --   require("telescope.builtin").find_files(opts)
    -- end, opt)

    -- Function to check if we're in a Git repository
    local function is_git_repo()
      local handle = io.popen("git rev-parse --is-inside-work-tree 2>/dev/null")
      if handle then
        local result = handle:read("*a")
        handle:close()
        return result:match("true")
      end
      return false
    end

    -- Custom function to use fd for Git files
    local function fd_git_files()
      if is_git_repo() then
        return builtin.git_files({
          previewer = false,
          show_untracked = true,
        })
      else
        print("cwd not a git project")
      end
    end
    -- vim.keymap.set("n", "<M-p>", function()
    --   require("telescope.builtin").find_files({
    --     sort_mru = true, -- This enables MRU sorting
    --     cwd = vim.fn.systemlist("git rev-parse --show-toplevel")[1],
    --   })
    -- end, { noremap = true, silent = true, desc = "Find files with MRU sorting" })
    -- Keymapping for Git files using fd
    -- uses ~/.config/fd/ignore so not all git files are listed
    -- however we traverse back to the git root directory from anywhere in the project which is a win!

    -- migrated to fzf lua
    -- vim.keymap.set({ "n" }, "<M-p>", fd_git_files, { noremap = true, silent = true, desc = "Find Git files using fd" })
    -- vim.keymap.set({ "n" }, "<M-f>", fd_git_files, { noremap = true, silent = true, desc = "Find Git files using fd" })

    -- k("n", "<c-s>", [[:bro oldfiles<CR>]], opt)

    --- migrated to fzf lua
    -- k("n", "<C-r>", function()
    --   require("telescope.builtin").oldfiles({
    --     cwd_only = false,
    --     file_ignore_patterns = { "COMMIT_EDITMSG$" },
    --     hidden = true,
    --     no_ignore = true,
    --     sort_mru = true, -- Most recently used first
    --     sorting_strategy = "ascending",
    --   })
    -- end)

    -- k("n", "<C-t>", function()
    --   require("telescope.builtin").oldfiles({
    --     cwd_only = false,
    --     file_ignore_patterns = { "COMMIT_EDITMSG$" },
    --     hidden = true,
    --     no_ignore = true,
    --     sort_mru = true, -- Most recently used first
    --     sorting_strategy = "ascending",
    --   })
    -- end)

    telescope.load_extension("ui-select")
    telescope.load_extension("workspaces")
  end,
}
